
kotlin {
    targets {
        if (project.ext.ideaActive) {
            // tl;dr - this is hack so that local development works and we only have 1 "native" sourceSet
            //
            // when developing locally with intellij we pretend that the only native
            // target is the one the user is developing for and that the "posixMain" sourceSet
            // is the source directory for only that target. In reality it's a shared source set
            // used by all native targets but setting it up that way is not currently supported
            // see: https://youtrack.jetbrains.com/issue/KT-36086
            fromPreset(project.ext.ideaPreset, 'posix')
            println("[hack] enabled only for preset: ${project.ext.ideaPreset.name}")
        } else {
            fromPreset(presets.linuxX64, 'linuxX64')
            fromPreset(presets.macosX64, 'macosX64')
            fromPreset(presets.mingwX64, 'mingwX64')

//            def crossCompileTargets = [linuxX64, macosX64, mingwX64]
//            def host = getHostName()
//            switch (host) {
//                case 'linux':
//                    crossCompileTargets.remove(linuxX64)
//                    break
//                case 'windows':
//                    crossCompileTargets.remove(mingwX64)
//                    break
//                case 'macos':
//                    crossCompileTargets.remove(macosX64)
//                    break
//            }
//            disableCompilation(crossCompileTargets)
//            configure([mingwX64Test]) {
//                environment "PATH": "C:\\msys64\\mingw64\\bin;C:\\Tools\\msys64\\mingw64\\bin"
//            }
        }
    }

    sourceSets {
//        posixMain.dependencies {
//            implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-native', version: coroutines_version
//
//            implementation "org.jetbrains.kotlinx:atomicfu:$atomicfu_version"
//        }

        posixTest
        posixMain { dependsOn commonMain }

        if (!project.ext.ideaActive) {
            configure([iosArm32Main, iosArm64Main, iosX64Main, macosX64Main, linuxX64Main, mingwX64Main]) {
                dependsOn posixMain
            }

            configure([iosArm32Test, iosArm64Test, iosX64Test, macosX64Test, linuxX64Test, mingwX64Test]) {
                dependsOn posixTest
            }
        }
    }
}

project.ext.set("hasNative", true)
